from aiogram.types import InlineKeyboardButton, WebAppInfo, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from config import supabase
import hashlib
user_keyboard_button = {"button1": "üìú–ü—Ä–∏–º–µ—Ä –∞–Ω–∫–µ—Ç—ã", "button2": "üìù–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}


def user_keyboard():
    """
    Creates a user keyboard with two buttons.

    Returns:
        ReplyKeyboardMarkup: The user keyboard with two buttons.
    """
    user_keyboard = ReplyKeyboardBuilder()
    button1 = KeyboardButton(text=user_keyboard_button['button1'])

    button2 = KeyboardButton(text=user_keyboard_button['button2'])

    user_keyboard.row(button1)
    user_keyboard.row(button2)

    return user_keyboard.as_markup(resize_keyboard=True)


guild_keyboard_button = {"guild1": "‚Ö†", "guild2": "‚Ö°", "guild3": "‚Ö¢"}


def guild_keyboard():
    """
    Creates a reply keyboard with three guild buttons.

    Returns:
        InlineKeyboardMarkup: The reply keyboard.
    """
    # Create a new ReplyKeyboardBuilder
    guild_keyboard = ReplyKeyboardBuilder()

    # Create three KeyboardButton objects with the guild button texts
    guild1 = KeyboardButton(text=guild_keyboard_button['guild1'])
    guild2 = KeyboardButton(text=guild_keyboard_button['guild2'])
    guild3 = KeyboardButton(text=guild_keyboard_button['guild3'])

    # Add the guild buttons to a new row in the reply keyboard
    guild_keyboard.row(guild1, guild2, guild3)

    # Return the reply keyboard as a markup
    return guild_keyboard.as_markup(resize_keyboard=True)


genres_of_work = {
    "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è": False,
    "–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏": False,
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤": False,
    "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π": False,
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π": False,
    "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥": False,
    "–û–±—É—á–µ–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏": False,
    "–¢—É—Ä–∏–∑–º": False,
    "–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å": False,
    "–ì–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å": False,
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": False,
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç": False,
    "–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤": False,
    "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏": False,
    "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è": False,
    "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏": False,
    "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è": False,
    "–§–∏—Ç–Ω–µ—Å": False,
    "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": False,
    "–£—Ö–æ–¥ –∑–∞ –ø–æ–∂–∏–ª—ã–º–∏ –ª—é–¥—å–º–∏": False,
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤": False,
    "–¢–∞–∫—Å–∏": False,
    "–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞": False,
    "–£–±–æ—Ä–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π": False,
    "–û–∑–µ–ª–µ–Ω–µ–Ω–∏–µ –∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω": False,
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏": False,
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π": False,
    "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞": False,
    "–û–±—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–∞–º": False,
    "–ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞": False,
    "–ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": False,
    "–ü—Ä–æ–∫–∞—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π": False,
    "–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è": False,
    "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è": False,
    "–ü–æ—à–∏–≤ –æ–¥–µ–∂–¥—ã": False,
    "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏": False,
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å": False,
    "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤": False,
    "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ —Å–≤—è–∑–∏": False,
    "–ü—Ä–æ–¥–∞–∂–∞ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏": False,
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è": False,
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤": False,
    "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤": False,
    "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤": False,
    "–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥": False,
    "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è": False,
    "–§–æ—Ç–æ- –∏ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–∞": False,
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—ã—Å—Ç–∞–≤–æ–∫ –∏ —è—Ä–º–∞—Ä–æ–∫": False,
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ": False
}

def hash_buttons(text):
    return hashlib.md5(text.encode()).hexdigest()[:10]

hash_to_genre = {hash_buttons(genre): genre for genre in genres_of_work.keys()}

def genre_of_work_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for genre, selected in genres_of_work.items():
        callback_data = hash_buttons(genre)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        kb_builder.add(InlineKeyboardButton(
            text=f"{'‚úÖ' if selected else ' '} {genre}",
            callback_data=callback_data
        ))
    kb_builder.adjust(1)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    kb_builder.row(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    return kb_builder.as_markup(resize_keyboard=True)


registered_keyboard_buttons = {
    "button1": "üìú–ú–æ—è –∞–Ω–∫–µ—Ç–∞",
    "button2": "üìù–ü–æ–∏—Å–∫",
}


def registered_keyboard():
    """
    Creates a user keyboard with two buttons.

    Returns:
        ReplyKeyboardMarkup: The user keyboard with two buttons.
    """
    registered_keyboard = ReplyKeyboardBuilder()
    button1 = KeyboardButton(text=registered_keyboard_buttons['button1'])

    button2 = KeyboardButton(text=registered_keyboard_buttons['button2'])

    registered_keyboard.row(button1)
    registered_keyboard.row(button2)

    return registered_keyboard.as_markup(resize_keyboard=True)


def skip_keyboard():
    """
    Creates an inline keyboard markup with a single button labeled "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (Skip in English).

    Returns:
        InlineKeyboardMarkup: The generated inline keyboard markup.
    """
    kb_builder = InlineKeyboardBuilder()
    kb_builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"))
    return kb_builder.as_markup()



profile_keyboard_buttons = {
    "button1": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
    "button2": "üîô–ù–∞–∑–∞–¥",
}


def profile_keyboard():
    profile_keyboard = ReplyKeyboardBuilder()
    button1 = KeyboardButton(text=profile_keyboard_buttons['button1'])
    button2 = KeyboardButton(text=profile_keyboard_buttons['button2'])
    profile_keyboard.row(button1)
    profile_keyboard.row(button2)
    return profile_keyboard.as_markup(resize_keyboard=True)


edit_profile_buttons = {
    "button1": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û",
    "button2": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –ì–∏–ª—å–¥–∏—é",
    "button3": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏",
    "button4": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "button5": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –¢–µ–ª–µ—Ñ–æ–Ω",
    "button6": "üìí–ò–∑–º–µ–Ω–∏—Ç—å Email",
    "button7": "üìí–ò–∑–º–µ–Ω–∏—Ç—å –í–∏–∑–∏—Ç–∫—É",
    "button8": "üîô–ù–∞–∑–∞–¥",
}


def profile_edit_keyboard():
    kb_builder = ReplyKeyboardBuilder()
    button1 = KeyboardButton(text=edit_profile_buttons['button1'])
    button2 = KeyboardButton(text=edit_profile_buttons['button2'])
    button3 = KeyboardButton(text=edit_profile_buttons['button3'])
    button4 = KeyboardButton(text=edit_profile_buttons['button4'])
    button5 = KeyboardButton(text=edit_profile_buttons['button5'])
    button6 = KeyboardButton(text=edit_profile_buttons['button6'])
    button7 = KeyboardButton(text=edit_profile_buttons['button7'])
    button8 = KeyboardButton(text=edit_profile_buttons['button8'])
    kb_builder.row(button1, button2)
    kb_builder.row(button3, button4)
    kb_builder.row(button5, button6)
    kb_builder.row(button7, button8)
    return kb_builder.as_markup()


back_button = {
    "button1": "üîô–ù–∞–∑–∞–¥"}


def back_keyboard():
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.row(KeyboardButton(text=back_button['button1']))
    return kb_builder.as_markup(resize_keyboard=True)


guild_edit_profile = {
    "guild1": "‚Ö†", "guild2": "‚Ö°", "guild3": "‚Ö¢", "back1": "üîô–ù–∞–∑–∞–¥"
}


def guild_edit_keyboard():
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.row(KeyboardButton(text=guild_edit_profile['guild1']), KeyboardButton(text=guild_edit_profile['guild2']),
                   KeyboardButton(text=guild_edit_profile['guild3']))
    kb_builder.row(KeyboardButton(text=guild_edit_profile['back1']))
    return kb_builder.as_markup(resize_keyboard=True)


def reset_genres_of_work():
    for genre in genres_of_work:
        genres_of_work[genre] = False

navigation_keyboard_buttons = {
    "button1": "‚¨ÖÔ∏è–í–ª–µ–≤–æ",
    "button2": "üîô–ù–∞–∑–∞–¥",
    "button3": "‚û°Ô∏è–í–ø—Ä–∞–≤–æ"
}

def navigation_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        KeyboardButton(text=navigation_keyboard_buttons['button1']),
        KeyboardButton(text=navigation_keyboard_buttons['button2']),
        KeyboardButton(text=navigation_keyboard_buttons['button3'])
    )
    return keyboard.as_markup(resize_keyboard=True)